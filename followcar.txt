
// 팔로우카 이수호

#include <avr/io.h>
#include<avr/interrupt.h> 
#include <util/delay.h>

void frontall();
void frontlittle();
void memory();
void turn();
unsigned short distanceLLB(char TRIG, char ECHO);
unsigned short distanceRRF(char TRIG, char ECHO);
SIGNAL(SIG_INTERRUPT0); // 인터럽트1 후면
SIGNAL(SIG_INTERRUPT1); // 인터럽트2 전면


// 전면부 왼쪽 초음파 센서
#define TRIGL 6    //Trigger 신호 (출력 = PE6)
#define ECHOL 7     //Echo 신호 (입력 = PE7)
// 왼쪽 초음파 센서
#define TRIGLL 4    //Trigger 신호 (출력 = PE4)
#define ECHOLL 5     //Echo 신호 (입력 = PE5)
// 앞중간 초음파 센서
#define TRIGF 2    //Trigger 신호 (출력 = PD2)
#define ECHOF 3     //Echo 신호 (입력 = PD3)
// 앞중간 초음파 센서
#define TRIGB 2    //Trigger 신호 (출력 = PE2)
#define ECHOB 3     //Echo 신호 (입력 = PE3)
// 전면부 오른쪽 초음파 센서
#define TRIGR 6    //Trigger 신호 (출력 = PD6)
#define ECHOR 7     //Echo 신호 (입력 = PD7)
// 오른쪽 초음파 센서
#define TRIGRR 4    //Trigger 신호 (출력 = PD4)
#define ECHORR 5     //Echo 신호 (입력 = PD5)

#define SOUND_VELOCITY 340UL //소리 속도 (m/sec)

unsigned short speed =0;          // 오른쪽 모터 속도
unsigned short distanceL;     // 전면부 왼쪽 거리 변수
unsigned short distanceR;     // 전면부 오른쪽 거리 변수
unsigned short LB;     // 전면부 왼쪽 거리 변수
unsigned short RB;     // 전면부 오른쪽 거리 변수
unsigned short LEFT;          // 왼쪽 거리 변수
unsigned short RIGHT;         // 오른쪽 거리 변수
unsigned short BACK;         //뒤쪽 거리 변수
unsigned short FRONT;         // 오른쪽 거리 변수
unsigned long i = 0; // 반복을 위한 i

// 인터럽트 비교값
char STOP = 0x03; 
char STARTF = 0xFE;
char STARTB = 0xFD;
// 스위치 비교값
char SW = 0xE0; 

void main(){
	EICRA = 0x00; // LOW level에서 인터럽트발생
	EIMSK = 0x03; // 인터럽트INT2
	EIFR = 0x03; // INT1,2 플래그
	sei();
	DDRB=0x90;     // 모터 출력
	DDRA=0x3F;
	TCCR1 = 0x61;  // 오른쪽 모터 PWM, No Prescaling  
	TCNT0 = 0;     // 왼쪽 모터 TNCT
	TCCR2 = 0x61;  // 오른쪽 모터 PWM, No Prescaling  
	TCNT2 = 0;     // 오른쪽 모터 TNCT
	DDRE=0x54; // TRIGL = 출력 , ECHOL = 입력 setting // 전면부 왼쪽, 왼쪽, 뒤 초음파센서 포트 
	DDRD=0x54; // TRIGR = 출력 , ECHOR = 입력 setting // 전면부 오른쪽, 오른쪽, 뒤 초음파센서 포트 

	DDRF = 0x00;  // PBF입력설정
	PORTF = 0xE0; // PBF초기값
   	while(1)
	{
		if ((PINF & SW) == 0x60){ // 중간 스위치 
			EIMSK = 0x02; //디폴트 전진시 인터럽트INT2
			EIFR = 0x02; // INT1,2 플래그
			memory();
		}
		if ((PINF & SW) == 0xA0) // 오른쪽 스위치
			while(1) {
				EIMSK = 0x02; //디폴트 전진시 인터럽트INT2
				EIFR = 0x02; // INT1,2 플래그
				distanceL = distanceLLB(TRIGL, ECHOL);
				_delay_us(50);  
				distanceR = distanceRRF(TRIGR, ECHOR);
				frontall(distanceL,distanceR);
			}
		if ((PINF & SW) == 0xC0){  // 맨왼쪽 스위치
			EIMSK = 0x02; //디폴트 전진시 인터럽트INT2
			EIFR = 0x02; // INT2 플래그
			frontlittle();
		}					
	}
} // 메인 문 끝

void frontall(distanceL,distanceR) {
		PORTA = 0b00000101;
		speed=160;          // 모터 속도
	// 모터 속도 제어 구문 
	if( (distanceL > 1000) && (distanceR > 1000) ) { //앞의 차를 놓쳤을 경우 
		PORTA = 0b00110000;
		EIMSK = 0x03; // 인터럽트INT2
		EIFR = 0x03; // INT1,2 플래그
		while(1)
		{
			if ((PINF & SW) == 0xA0){
				EIMSK = 0x02; // 인터럽트INT2
				EIFR = 0x02; // INT1,2 플래그
				PORTA = 0b00010101;
				speed=180;
				for(i=0;i<1200000;i++){
					OCR0 = speed;  
					OCR2 = speed+4;
				}
				OCR0 = 0;  
       			OCR2 = 0;		
				turn();
				break;
			}
			if ((PINF & SW) == 0xC0){
				turn();
				break;
			}
			EIMSK = 0x02; // 인터럽트 INT2
			EIFR = 0x02; // INT2 플래그
		}
	}
	else if( (distanceL < 110) || (distanceR < 110) ){   // 전면부 초음파 센서 모두 10cm 이내 장애물 존재하는 경우 측면 초음파 센서 작동 
		EIMSK = 0x01; //후진시 인터럽트INT1
		EIFR = 0x01; // INT1 플래그
		PORTA = 0b00001010;
		speed = 160;	
		if( distanceL < distanceR+30 ){    // 왼쪽 전면부 초음파 센서 20cm 이내 장애물 존재하면 우회전 후진
			OCR0 = speed;  
			OCR2 = speed+12;
			_delay_ms(10);
		}
		else if ( distanceL+30 > distanceR){   // 오른쪽 전면부 초음파 센서 20cm 이내 장애물 존재하면 좌회전 후진			
			OCR0 = speed+13;  
           	OCR2 = speed;
			_delay_ms(10);
		}
		else {    
           	OCR0 = speed;  
           	OCR2 = speed+2;
			_delay_ms(10);
		}
		EIMSK = 0x02; //디폴트 전진시 인터럽트INT2
		EIFR = 0x02; // INT1,2 플래그
	} // 후진 if 문 끝 
	else if( (distanceL < 130) || (distanceR < 130) ){   // 전면부 초음파 센서 모두 10cm 이내 장애물 존재하는 경우 측면 초음파 센서 작동 
      	OCR0 = 0;  
      	OCR2 = 0;
		EIMSK = 0x03;
		EIFR = 0x03; 
		_delay_ms(10);
		EIMSK = 0x02; //디폴트 전진시 인터럽트INT2
		EIFR = 0x02; // INT1,2 플래그
	} // 전면부 모두 근접 if 문 끝 
	else {
    	PORTA = 0b0000101;
		if( (distanceL > LB+200)&&(distanceR > RB+200))
			speed = 180;	  
		else if( (distanceL > LB+100)&&(distanceR > RB+100))
			speed = 170;	
		if( (distanceL > 250)&&(distanceR > 250))
			speed = 180;	  
		else if( (distanceL > 160)&&(distanceR > 160))
			speed = 170;
		if( (distanceL < distanceR+30) && (distanceL+30 > distanceR) ){    // 왼쪽 전면부 초음파 센서 20cm 이내 장애물 존재하면 우회전
			OCR0 = speed;  
           	OCR2 = speed+2;
			_delay_ms(10);
		}
			else {

			if( distanceL < distanceR ){    // 왼쪽 전면부 초음파 센서 20cm 이내 장애물 존재하면 우회전
				if ( 400 < distanceR - distanceL ){	
					OCR0 = speed;  
           			OCR2 = speed+30;
					_delay_ms(10);
				}	
				else if ( 300 < distanceR - distanceL ){	
					OCR0 = speed;  
           			OCR2 = speed+20;
					_delay_ms(10);
				}
				else if ( 200 < distanceR - distanceL ){	
					OCR0 = speed;  
           		OCR2 = speed+15;
					_delay_ms(10);
				}
				else if	( 100 < distanceR - distanceL ){	
					OCR0 = speed;  
           			OCR2 = speed+10;
					_delay_ms(10);
				}
				else {    
           			OCR0 = speed;  
           			OCR2 = speed+4;
					_delay_ms(10);
				}
			}
			else {    // 오른쪽 전면부 초음파 센서 20cm 이내 장애물 존재하면 좌회전
				if ( 400 < distanceL - distanceR ){	
					OCR0 = speed+30;  
           			OCR2 = speed;
					_delay_ms(10);
				}
           		else if ( 300 < distanceL - distanceR ){	
					OCR0 = speed+20;  
           			OCR2 = speed;
					_delay_ms(10);
				}
				else if ( 200 < distanceL - distanceR ){	
					OCR0 = speed+15;  
           			OCR2 = speed;
					_delay_ms(10);
				}
				else if ( 100 < distanceL - distanceR ){	
					OCR0 = speed+10;  
           			OCR2 = speed;
					_delay_ms(10);
				}
				else {    
           			OCR0 = speed+3;  
           			OCR2 = speed;
					_delay_ms(10);
				}
			}
		}
	}
	LB = distanceL;
	RB = distanceR;
}

void frontlittle() {
	ADMUX = 0b01000000;
	ADCSRA |= 0x07;
	ADCSRA |= (1<<ADEN) | (1<<ADFR) | (1<<ADSC); 
	while(1){
		speed=160;          // 오른쪽 모터 속도
		while(!(ADCSRA & (1<<ADIF)));
		float volt=0;
		float dist = 0;
		volt = 5.0*ADC/1024;
		float val = 0.04 * volt;
		dist = (1/val);
		if (dist<25) {
			float FRONT = distanceRRF(TRIGF, ECHOF);
		 	dist =  (FRONT/10);
		}
		if(dist> 145) { //
			float FRONT = distanceRRF(TRIGF, ECHOF);
		 	dist =  (FRONT/10);
		}	
		if( dist < 12) {
			PORTA = 0b00001010;
			EIMSK = 0x01; //후진시 인터럽트INT1
			EIFR = 0x01; // INT1 플래그
    	 	OCR0 = 160;  
     	 	OCR2 = 162;
			_delay_ms(10);
		}	
		else if( dist < 14) {
			PORTA = 0b0000000;
    	 	OCR0 = 0;  
     	 	OCR2 = 0;
			EIMSK = 0x03; //전진시 인터럽트INT2
			EIFR = 0x03; // INT1,2 플래그
			_delay_ms(10);
		}
		else if( dist < 50) {
			EIMSK = 0x02; //전진시 인터럽트INT2
			EIFR = 0x02; // INT2 플래그
			PORTA = 0b0000101;
			OCR0 = speed;  
           	OCR2 = speed+2;
			_delay_ms(10);
		}
		else {

			distanceL = distanceLLB(TRIGL, ECHOL);
			_delay_us(50);  
			distanceR = distanceRRF(TRIGR, ECHOR);
			EIMSK = 0x02; //전진시 인터럽트INT2
			EIFR = 0x02; // INT2 플래그
			PORTA = 0b0000101;
			if( distanceL < distanceR) {
				if( distanceL < (dist*10))	{
					OCR0 = speed;  
       	    		OCR2 = speed+20;
					_delay_ms(10);
				}
				else {
					OCR0 = speed;  
           			OCR2 = speed+2;
				}
			}
			else if ( distanceR < distanceL) {
				if( distanceR < (dist*10)) {
					OCR0 = speed+20;  
    	       		OCR2 = speed;
					_delay_ms(10);
				}
				else {
					OCR0 = speed;  
           			OCR2 = speed+2;
				}
			}
			else{
				OCR0 = speed;  
        	   	OCR2 = speed+2;
				_delay_ms(10);
			}
		}
	}
}
void memory() {
	unsigned short *LEFTADD;
	unsigned short *RIGHTADD;
	unsigned short *LEFTGO;
	unsigned short *RIGHTGO;

	OCR0 = 0;  
    OCR2 = 0;

	LEFTADD = 0x100;
	RIGHTADD = 0x550;
	LEFTGO = 0x100;
	RIGHTGO = 0x550;
	while(1){
		PORTA = 0b00010000;
		*LEFTADD = distanceLLB(TRIGL, ECHOL);
		*RIGHTADD = distanceRRF(TRIGR, ECHOR);	
		
		LEFTADD++;
		RIGHTADD++;
		_delay_ms(10);
		if(LEFTADD>0x150)
			break;
	}
	PORTA = 0b00000101;

	while(1){ 
		*LEFTADD = distanceLLB(TRIGL, ECHOL);
		*RIGHTADD = distanceRRF(TRIGR, ECHOR);
		LEFTADD++;
		RIGHTADD++;
		PORTA = 0b00000101;
		frontall(*LEFTGO, *RIGHTGO);
		LEFTGO++;
		RIGHTGO++;

		if(LEFTADD>0x546) {
			LEFTADD = 0x100;
			RIGHTADD = 0x550;
		}
		if(LEFTGO>0x546) {
			LEFTGO = 0x100;
			RIGHTGO = 0x550;
		}
	}
}


void turn(){
	LEFT = distanceLLB(TRIGLL, ECHOLL);   // 거리=속도x시간, 거리 단위는 1mm
	if(LEFT < 200){ // 좌측 및 우측 장애물 모두 20cm 미만인 경우 정지 (이 부분 후진으로 수정 예정) 
			EIMSK = 0x01; //후진시 인터럽트INT1
			EIFR = 0x01; // INT1 플래그
			PORTA = 0b00001010;
		    for(i=0;i<850000;i++){
			OCR0 = 168;  
        	OCR2 = 0;
			}
            for(i=0;i<550000;i++){
			OCR0 = 0;  
        	OCR2 = 173;
			}
			EIMSK = 0x02; //전진시 인터럽트INT2
			EIFR = 0x02; // INT2 플래그
	}
	else
	{
		RIGHT = distanceRRF(TRIGRR, ECHORR);
		if( RIGHT < 200 ){ // 우측 장애물 거리가 더 먼 경우 우회전
				EIMSK = 0x01; //후진시 인터럽트INT1
				EIFR = 0x01; // INT1 플래그
				PORTA = 0b00001010;
				for(i=0;i<900000;i++){
					OCR0 = 0;  
     		   		OCR2 = 170;
				}
    	       for(i=0;i<450000;i++){
					OCR0 = 170;  
    	    		OCR2 = 0;
				}
				EIMSK = 0x02; //전진시 인터럽트INT2
				EIFR = 0x02; // INT2 플래그
		}
		else {
				BACK = distanceLLB(TRIGB, ECHOB); 
			if( BACK<400) {
				PORTA = 0b00000101;
			    for(i=0;i<600000;i++){
					OCR0 = 168;  
	        		OCR2 = 173;
				}
				EIMSK = 0x01; //후진시 인터럽트INT1
				EIFR = 0x01; // INT1 플래그				
				PORTA = 0b00001010;
		    	for(i=0;i<680000;i++){
					OCR0 = 0;  
    	    		OCR2 = 172;
				}
				EIMSK = 0x02; //전진시 인터럽트INT2
				EIFR = 0x02; // INT2 플래그	
				PORTA = 0b00000101;
			    for(i=0;i<370000;i++){
					OCR0 = 167;  
        			OCR2 = 158;
				}
			}
			else {
				FRONT = distanceRRF(TRIGF, ECHOF);
			}
			if(FRONT < 200){   // 전면부 초음파 센서 모두 10cm 이내 장애물 존재하는 경우 측면 초음파 센서 작동
				OCR0=0;
				OCR2=0;
			}
			else
				turn();
		}	
	}
}

unsigned short distanceLLB(char TRIG, char ECHO) {
	TCCR1B=0x03;     // Timer/Counter1 클록 4us(64분주)
	PORTE &= ~(1<<TRIG);  // TrigL=LOW상태
	_delay_us(10);         // 10us동안 유지
	PORTE |= (1<<TRIG);   // TrigL=HIGH -> 거리 측정 명령 시작
	_delay_us(10);         // 10us동안 유지
	PORTE &= ~(1<<TRIG);  // TrigL=LOW -> 거리 측정 명령 끝
	while(!(PINE & (1<<ECHO)));   // EchoL=HIGH가 될 때까지 대기
	TCNT1=0x0000;     //Timer/Counter1 값 초기화
	while(PINE & (1<<ECHO));     //Echo=LOW가 될 때까지 대기
	TCCR1B=0x00;     //Timer/Counter1 클록 정지(클록 입력 차단,CS11~CS10=000)
	return (unsigned int)(SOUND_VELOCITY * (TCNT1*4/2)/1000);   // 거리=속도x시간, 거리 단위는 1mm
}
unsigned short distanceRRF(char TRIG, char ECHO) {
	TCCR1B=0x03;     // Timer/Counter1 클록 4us(64분주)
	PORTD &= ~(1<<TRIG);  // TrigL=LOW상태
	_delay_us(10);         // 10us동안 유지
	PORTD |= (1<<TRIG);   // TrigL=HIGH -> 거리 측정 명령 시작
	_delay_us(10);         // 10us동안 유지
	PORTD &= ~(1<<TRIG);  // TrigL=LOW -> 거리 측정 명령 끝
	while(!(PIND & (1<<ECHO)));   // EchoL=HIGH가 될 때까지 대기
	TCNT1=0x0000;     //Timer/Counter1 값 초기화
	while(PIND & (1<<ECHO));     //Echo=LOW가 될 때까지 대기
	TCCR1B=0x00;     //Timer/Counter1 클록 정지(클록 입력 차단,CS11~CS10=000)
	return (unsigned int)(SOUND_VELOCITY * (TCNT1*4/2)/1000);   // 거리=속도x시간, 거리 단위는 1mm
}


SIGNAL(SIG_INTERRUPT0){ //후진 중 인터럽트
cli(); // 전체 인터럽트금지
	PORTA = 0b00110000; //정지 비상등 점등 및 부저 울림
	OCR0 = 0;  
	OCR2 = 0;
	_delay_ms(3000);
	PORTA = 0b00001010;
sei(); //인터럽트 활성화
}

SIGNAL(SIG_INTERRUPT1){ //전진 중 인터럽트
cli(); // 전체 인터럽트금지
	PORTA = 0b00110000; //정지 비상등 점등 및 부저 울림
	OCR0 = 0;  
	OCR2 = 0;
	_delay_ms(3000);
	PORTA = 0b00000101;
sei(); //인터럽트 활성화
}
